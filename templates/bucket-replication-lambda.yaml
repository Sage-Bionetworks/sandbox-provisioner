# This template creates an S3 bucket and a Lambda function to automate file upload to Synapse.
#
# The S3 bucket is granted permissions to be a Synapse storage location, *and* an S3 replication destination
# from a collaborator's AWS account.
#
# Lambda Code is here: https://github.com/ecmonsen/Synapse-replication-uploader
#
# The Lambda function is triggered by PUT requests to the bucket. It reads the files, computes and writes md5 sums
# back to the bucket, and adds file handles to Synapse.
#
# BEFORE STACK CREATION:
#
# 1. Use AWS SAM to package the Lambda code and upload it to an S3 bucket. The S3 bucket must be readable by the
# identity creating the CloudFormation stack. Provide the S3 bucket and key as parameters FunctionCodeBucket and
# FunctionCodeKey to CloudFormation.
#
# ADDITIONAL ACTIONS REQUIRED AFTER STACK CREATION:
#
# 1. After the stack creates the S3 bucket, you will need to use Synapse API or CLI to create an external
# Synapse storage location must pointing to the bucket. Then update the stack with the new value for
# SynapseStorageLocationId. Use code or web as specified here:
# https://docs.synapse.org/articles/custom_storage_location.html#set-s3-bucket-as-upload-location
#
# Here's a handy command line for getting the bucket name:
# `aws cloudformation describe-stacks --stack-name "${STACKNAME}" --query "Stacks[0].Outputs[?OutputKey=='DataBucketName'].OutputValue" --output text`
#
# 2. Update the Secrets Manager secret value with the contents of a Synapse config file. The config file
# should have the credentials of the Synapse on whose behalf the Lambda will do uploads. This can be done using
# the AWS console or the CLI with these commands (you will need to be admin or assume an admin role to encrypt secrets):
#
# `SECRET_NAME=$(aws cloudformation describe-stacks --stack-name "${STACKNAME}" --query "Stacks[0].Outputs[?OutputKey=='CredentialsSecretName'].OutputValue" --output text)`
# `aws secretsmanager put-secret-value --secret-id "$SECRET_NAME" --secret-binary fileb://path/to/.synapseConfig`

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  FunctionCodeBucket:
    Type: String
    Description: S3 bucket where lambda deployment package is stored
  FunctionCodeKey:
    Type: String
    Description: S3 key of lambda deployment package file
  SynapseConfig:
    Type: String
    Description: >
      Contents of a .synapseConfig file containing Synapse username and API key.
      Minimum contents required are these three lines:
      [authentication]
      username = <user name>
      apikey = <api key>
    Default: "To Do: Replace with a valid .synapseConfig with credentials"
  SynapseStorageLocationId:
    Type: Number
    Description: >
      Integer location ID for the bucket containing the files to be added to Synapse. Note a blank value should
      be provided the when the stack is created.
      See https://docs.synapse.org/articles/custom_storage_location.html
    Default: -1
  SynapseNotifyUsers:
    Type: String
    Description: >
      Comma-delimited list of numeric Synapse user IDs to be notified when an attempt to sync to Synapse is made
      by the Lambda function. Example: the `ownerId` returned by a call to the Synapse REST API /userProfile.
  ReplicationSourceAccountId:
    Type: Number
    Description: ID of the AWS account holding the replication source bucket.
  SynapseAWSAccountId:
    Type: Number
    Description: >
      ID of the Synapse AWS account. Used for allowing Synapse to access the DataBucket as an external storage location.
      See https://docs.synapse.org/articles/custom_storage_location.html
    Default: 325565585839
  Md5BlockSize:
    Type: Number
    Default: 5242880 # 5 MB
    Description:
      Maximum block size allocated to computing MD5 sums, in bytes.
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'

Mappings:
  AdminRoleArns:
    "563295687221":
      Arn: "arn:aws:iam::563295687221:role/accounts-AWSIAMAdminRole-1B5HUQPC19H69"
    "055273631518":
      Arn: "arn:aws:iam::055273631518:role/accounts-AWSIAMAdminRole-JL0BF315YDU0"
    "398582528253":
      # Note: Groups not allowed. Create a role that root can assume
      Arn: "arn:aws:iam::398582528253:role/AdminRole"

Resources:
  KmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "${AWS::StackName}Key"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          # TEMP: for testing the key
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !FindInMap [AdminRoleArns, !Ref "AWS::AccountId", Arn]
                - !GetAtt LambdaExecutionRole.Arn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:DescribeKey"
              - "kms:Generate*"
              - "kms:*"
            Resource: "*"
            # TODO: Allow lambda to decrypt only; allow other user(s) to encrypt
            # TODO tags on everything
      Tags:
        - Key: Department
          Value: !Ref Department
        - Key: Project
          Value: !Ref Project
        - Key: OwnerEmail
          Value: !Ref OwnerEmail

  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/Key"
      TargetKeyId: !Ref KmsKey

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #Description: ARN of role that lambda uses for execution.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
      Tags:
        - Key: Department
          Value: !Ref Department
        - Key: Project
          Value: !Ref Project
        - Key: OwnerEmail
          Value: !Ref OwnerEmail

  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      #Description: Allows access to the S3 data bucket and CloudWatch logs.
      PolicyName: !Sub ${AWS::StackName}-LambdaExecutionPolicy
      Roles: [!Ref 'LambdaExecutionRole']
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-data"
            Sid: VisualEditor1
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-data/*"
          - Action: ['kms:*']
            Effect: Allow
            Resource: !GetAtt KmsKey.Arn
          - Action: ['secretsmanager:GetSecretValue']
            Effect: Allow
            Resource: !Ref SynapseCredentialsSecret

  SynapseCredentialsSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: API key used to access Synapse
      SecretString: !Ref SynapseConfig
      KmsKeyId: !Ref KmsKey
      # Need explicit name so that it can be referenced by the Lambda function
      Name: !Sub "${AWS::Region}-${AWS::StackName}-SynapseCredentialsSecret"
      Tags:
        - Key: Department
          Value: !Ref Department
        - Key: Project
          Value: !Ref Project
        - Key: OwnerEmail
          Value: !Ref OwnerEmail

  BucketToSynapseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref FunctionCodeBucket
        S3Key: !Ref FunctionCodeKey
      Description: Adds files from an S3 bucket to Synapse.
      Environment:
        Variables:
          CREDENTIALS_SECRET_NAME: !Sub "${AWS::Region}-${AWS::StackName}-SynapseCredentialsSecret"
          SYNAPSE_SOURCE_BUCKET_STORAGE_LOCATION_ID: !Ref SynapseStorageLocationId
          SYNAPSE_NOTIFY_USERS: !Ref SynapseNotifyUsers
          MD5_BLOCK_SIZE: !Ref Md5BlockSize
          KMS_KEY_ARN: !Ref KmsKey
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: Department
          Value: !Ref Department
        - Key: Project
          Value: !Ref Project
        - Key: OwnerEmail
          Value: !Ref OwnerEmail

  DataBucket:
    Type: AWS::S3::Bucket
    # Data needs to live on even if the other infrastructure is removed
    DeletionPolicy: Retain
    DependsOn:
      - LambdaExecutionRolePolicy
    Properties:
      BucketName: !Sub ${AWS::StackName}-data
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt [BucketToSynapseFunction, Arn]
      Tags:
        - Key: Department
          Value: !Ref Department
        - Key: Project
          Value: !Ref Project
        - Key: OwnerEmail
          Value: !Ref OwnerEmail

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref BucketToSynapseFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-data"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForDestinationBucket
        Statement:
          # Allow Synapse to access the data bucket
          - Sid: Synapse1
            Principal:
              AWS: !Sub "arn:aws:iam::${SynapseAWSAccountId}:root"
            Action:
              - "s3:ListBucket*"
              - "s3:GetBucketLocation"
            Resource: !GetAtt
              - DataBucket
              - Arn
            Effect: 'Allow'
          - Sid: Synapse2
            Principal:
              AWS: !Sub "arn:aws:iam::${SynapseAWSAccountId}:root"
            Action:
              - "s3:GetObject*"
              - "s3:*MultipartUpload*"
            Resource: !Join [ "", [!GetAtt [DataBucket, Arn], "/*"]]
            Effect: "Allow"
          # Allow the source bucket to write to the data bucket
          - Sid: SourceAccount1
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${ReplicationSourceAccountId}:root
            Action:
              - s3:GetBucketVersioning
              - s3:PutBucketVersioning
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ObjectOwnerOverrideToBucketOwner
            Resource:
              - !GetAtt [DataBucket, Arn]
              - !Join [ "", [!GetAtt [DataBucket, Arn], "/*"]]

Outputs:
  BucketToSynapseFunctionArn:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-BucketToSynapseFunctionArn"
    Description: ARN of the lambda function that was created in this template.
    Value: !GetAtt BucketToSynapseFunction.Arn
  DataBucketArn:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DataBucketArn"
    Description: ARN of the data bucket that was created
    Value: !GetAtt DataBucket.Arn
  DataBucketName:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DataBucketName"
    Description: ARN of the data bucket that was created
    Value: !Ref DataBucket
  KmsKeyArn:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-KmsKeyArn"
    Description: ARN of the KMS key
    Value: !GetAtt KmsKey.Arn
  KmsKeyAliasName:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-KmsKeyAliasArn"
    Description: ARN of the KMS key alias
    Value: !Ref KmsKeyAlias
  KmsKeyUsageRole:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-KmsKeyUsageRole"
    Description: Role that was granted usage access to the KMS key
    Value: !FindInMap [AdminRoleArns, !Ref "AWS::AccountId", Arn]
  LambdaExecutionRoleArn:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LambdaExecutionRoleArn"
    Description: ARN of the lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
  CredentialsSecretName:
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-CredentialsSecretName"
    Description: Name of the Secrets Manager secret for encrypted Synapse credentials
    Value: !Ref SynapseCredentialsSecret
